package tek

import (
	"testing"

	"github.com/google/go-cmp/cmp"
)

var atcdata = []byte{
	0x25, 0x04, 0x01, 0x53, 0xb2, 0xab, 0xa3, 0x25, 0x41, 0x09, 0x11, 0x47,
	0xb2, 0x36, 0x13, 0x01, 0x63, 0x2e, 0x30, 0x4a, 0x66, 0x73, 0x39, 0x91,
	0x22, 0x6b, 0x2f, 0x03, 0x67, 0x32, 0x23, 0x70, 0xbd, 0x23, 0x32, 0xac,
	0x62, 0x96, 0xeb, 0x2a, 0x02, 0x57, 0x46, 0x55, 0x2a, 0x63, 0xb1, 0x9f,
	0xe4, 0x2f, 0x91, 0x07, 0x35, 0x04, 0x2e, 0xf0, 0x02, 0x48, 0xec, 0x8a,
	0x5b, 0x02, 0x23, 0x15, 0x23, 0xe0, 0xb1, 0xf8, 0xec, 0xd1, 0x2a, 0x50,
	0xd5, 0xc4, 0x8c, 0x31, 0xc0, 0x19, 0x3c, 0x32, 0x3c, 0x37, 0xac, 0x74,
	0xe8, 0x5d, 0x59, 0xb5, 0xf4, 0xdf, 0x08, 0x48, 0x58, 0xb0, 0x16, 0x51,
	0x5c, 0xa3, 0xa5, 0x21, 0x9c, 0x97, 0x3d, 0x47, 0xe7, 0xa8, 0x60, 0x87,
	0x5c, 0xae, 0x7e, 0x72, 0xa6, 0x9e, 0x9e, 0xc1, 0xce, 0xa7, 0x3c, 0xaa,
	0x2d, 0x72, 0xb0, 0xb6, 0x38, 0x7a, 0x6e, 0xbe, 0x0c, 0x7f, 0xb8, 0x28,
	0x9c, 0xcc, 0xad, 0x44, 0x8c, 0xd8, 0xce, 0x90, 0x5e, 0xfa, 0xc8, 0xc0,
	0xc0, 0x48, 0xa4, 0xcf, 0xce, 0x60, 0x97, 0x86, 0x5c, 0x87, 0x0d, 0x06,
	0x98, 0x08, 0x9c, 0xd8, 0xa4, 0x65, 0x09, 0x00, 0xfe, 0x9c, 0xe0, 0x44,
	0x5c, 0x88, 0x10, 0xcc, 0xb7, 0x80, 0x8c, 0xbf, 0xfc, 0x01, 0xec, 0xc9,
	0xec, 0x8a, 0xea, 0xcc, 0x7c, 0x21, 0x89, 0xf4, 0x0c, 0x51, 0x0c, 0xac,
	0xcd, 0x28, 0x6c, 0xb0, 0x05, 0x2e, 0x82, 0x48, 0xab, 0x6b, 0x62, 0xa7,
	0xa6, 0xf0, 0x42, 0x98, 0xc5, 0xce, 0x07, 0x59, 0x3b, 0x01, 0x7f, 0xc3,
	0x09, 0xb9, 0x8b, 0x81, 0x9b, 0x2a, 0x41, 0x9c, 0xf8, 0x88, 0x47, 0x67,
	0x07, 0xbc, 0x47, 0x9e, 0xc2, 0x08, 0x95, 0xe0, 0x63, 0x49, 0x60, 0xad,
	0x3b, 0x8c, 0xc3, 0x8c, 0xc3, 0xcb, 0xf3, 0x83, 0xc3, 0x1d, 0x45, 0x3d,
	0x81, 0xcb, 0x9b, 0xb0, 0xd7, 0xd0, 0xe1, 0xfa, 0x6b, 0x54, 0x11, 0x35,
	0xb0, 0xe6, 0x33, 0x3b, 0x55, 0x17, 0x53, 0x4d, 0x45, 0x70, 0x25, 0x73,
	0x33, 0x67, 0xfb, 0x40, 0xf3, 0x31, 0xd7, 0x33, 0x90, 0x9e, 0xeb, 0x3f,
	0x77, 0x1b, 0x23, 0xa0, 0x0f, 0x62, 0x33, 0x23, 0x36, 0x34, 0x31, 0x93,
	0x1a, 0x6d, 0x69, 0xb0, 0x59, 0x01, 0xe3, 0xf0, 0xf7, 0xba, 0x12, 0x77,
	0x53, 0x5b, 0x63, 0x8a, 0x0b, 0x75, 0xe8, 0x50, 0x91, 0xda, 0xe9, 0x31,
	0xfc, 0xb2, 0x7d, 0x01, 0x8c, 0xfd, 0x3c, 0x9c, 0x1a, 0xee, 0x30, 0x63,
	0x22, 0x0b, 0xd0, 0x67, 0x3e, 0x93, 0x26, 0x7a, 0x3c, 0xef, 0x94, 0x9f,
	0xdc, 0x31, 0x98, 0x1e, 0xe9, 0x71, 0xb6, 0xa9, 0x4e, 0x3f, 0x3c, 0x3a,
	0x91, 0xb5, 0x35, 0xf2, 0xbe, 0xa5, 0xf6, 0x50, 0x9c, 0x87, 0x18, 0xee,
	0x7d, 0xdf, 0x50, 0x06, 0x36, 0x1b, 0x1c, 0x67, 0x54, 0x54, 0x4c, 0xe1,
	0x75, 0x7f, 0xde, 0x95, 0x8d, 0xc8, 0xde, 0x75, 0x7f, 0xc8, 0x38, 0x4c,
	0x4f, 0xc4, 0xec, 0xd9, 0xa6, 0x5d, 0x6c, 0xc4, 0x6c, 0xd4, 0x94, 0x8a,
	0xc9, 0xa0, 0xff, 0xe5, 0x9f, 0xa5, 0x48, 0x8d, 0xdc, 0x46, 0xc8, 0x9c,
	0x6e, 0x07, 0xec, 0xe4, 0xd4, 0xfe, 0x7d, 0xd3, 0x6d, 0x00, 0x60, 0x6f,
	0xd8, 0xfa, 0x0d, 0xec, 0x50, 0x30, 0x5e, 0xa0, 0x2b, 0x2c, 0xcc, 0x5f,
	0x9c, 0x0c, 0xec, 0xfc, 0x8c, 0x30, 0xfe, 0xd0, 0xc1, 0xf5, 0x30, 0x56,
	0x63, 0xc6, 0xe1, 0x1d, 0xfb, 0xe7, 0x52, 0xd0, 0xc7, 0x96, 0x60, 0x7e,
	0xef, 0x6d, 0xe1, 0x12, 0x83, 0xfb, 0xa3, 0xf0, 0xeb, 0xb2, 0x63, 0x86,
	0xab, 0x7d, 0x83, 0x19, 0x17, 0xf2, 0x42, 0x00, 0xb3, 0x6c, 0x62, 0x6c,
	0x9b, 0xce, 0x88, 0xc8, 0x00, 0x00, 0x03, 0x44, 0x44, 0x66, 0x46, 0xac,
	0x7b, 0xe2, 0x22, 0xed, 0xa7, 0x8d, 0x05, 0xd6, 0x83, 0x00, 0x91, 0x1b,
	0x36, 0xc1, 0xb3, 0x9a, 0x85, 0x87, 0x47, 0xbb, 0x53, 0x26, 0x13, 0x22,
	0xf3, 0xbf, 0xf3, 0x79, 0xc7, 0x2e, 0xb7, 0x62, 0xfb, 0x9d, 0x17, 0x16,
	0x39, 0x2b, 0xf1, 0x14, 0xa2, 0x3f, 0xb3, 0x56, 0x33, 0x9d, 0x1f, 0x71,
	0x71, 0x33, 0xca, 0xab, 0xfb, 0x7f, 0xb1, 0x15, 0xfc, 0x33, 0x1b, 0x92,
	0x22, 0x71, 0x13, 0x3d, 0x13, 0x5f, 0x41, 0x7e, 0x18, 0x03, 0x60, 0x92,
	0x25, 0xe5, 0x72, 0xdf, 0x61, 0x2b, 0x3c, 0x30, 0x4c, 0x31, 0xb8, 0xf3,
	0xe3, 0x4d, 0xb2, 0x23, 0x34, 0x5b, 0x5c, 0x60, 0x1c, 0x11, 0x3d, 0x3f,
	0xfd, 0x01, 0xbc, 0x1b, 0xfc, 0x40, 0xd4, 0x73, 0x2a, 0xbe, 0x24, 0xd7,
	0xd4, 0x1d, 0x8c, 0xb7, 0xac, 0xd0, 0x6c, 0x0a,

	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

	0xfb, 0xc5, 0xdc, 0x89, 0x22, 0x77, 0xf3, 0x02, 0x21, 0x58, 0x22, 0x94,
	0xef, 0x42, 0xe1, 0xc3, 0x52, 0x53, 0xd3, 0x98, 0xc2, 0xb1, 0xc7, 0x59,
	0xa7, 0x40, 0xc7, 0x77, 0x23, 0x61, 0x8a, 0x9a, 0x61, 0xd7, 0x82, 0x46,
	0x3b,
}
var atcunpacked = []uint16{
	//TODO
}
var verpack = []byte{
	0x25, 0x04, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x3b,
}
var ptr38 = []byte{
	0xfb, 0xc5, 0xdc, 0x89, 0x22, 0x77, 0xf3, 0x02, 0x21, 0x58, 0x22, 0x94,
	0xef, 0x42, 0xe1, 0xc3, 0x52, 0x53, 0xd3, 0x98, 0xc2, 0xb1, 0xc7, 0x59,
	0xa7, 0x40, 0xc7, 0x77, 0x23, 0x61, 0x8a, 0x9a, 0x61, 0xd7, 0x82, 0x46,
	0x3b, //0x0a,
}

var empty = []byte("%\x00\x01\xff;")

// TODO add split func and test on either session's "READ PTR,VER"

func TestTekUnpack(t *testing.T) {
	for _, td := range []struct {
		name string
		in   []byte
		want []uint16
	}{
		{
			name: "atc",
			in:   atcdata,
			want: atcunpacked,
		},
		{
			name: "empty",
			in:   empty,
			want: nil,
		},
		{
			name: "ver",
			in:   verpack,
			want: nil,
		},
	} {
		t.Run(td.name, func(t *testing.T) {
			got, err := Unpack(td.in)
			if err != nil {
				t.Fatal(err)
			}
			if d := cmp.Diff(td.want, got); len(d) > 0 {
				t.Fatalf("--want ++got\n%s", d)
			}
		})
	}
}

func Test_checksum(t *testing.T) {
	err := checksum(verpack[1:len(verpack)-2], 0xfb)
	if err != nil {
		t.Error(err)
	}
}

// ptr and ver data
// example from manual pg 132-135
var ptrx = []int{1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 31, 33, 35, 37, 39}
var verx = []int{
	62, 59, 63, 59, 63,
	59, 63, 59, 63, 59,
	63, 59, 63, 59, 63,
	60, 63, 60, 63, 60,
	63, 60, 63, 60, 63,
	60, 63, 60, 108, 106,
	64, 59, 64, 60, 64,
	60, 64, 60, 64, 60,
}

// TODO case with no data in column?
func TestPtrVerToATC(t *testing.T) {
	want := []xy{
		{X: 1, Y: 60.5},
		{X: 2, Y: 61},
		{X: 3, Y: 61},
		{X: 4, Y: 61},
		{X: 5, Y: 61},
		{X: 6, Y: 61},
		{X: 7, Y: 61},
		{X: 8, Y: 61.5},
		{X: 9, Y: 61.5},
		{X: 10, Y: 61.5},
		{X: 11, Y: 61.5},
		{X: 12, Y: 61.5},
		{X: 13, Y: 61.5},
		{X: 14, Y: 84},
		{X: 15, Y: 61.5},
		{X: 16, Y: 62},
		{X: 17, Y: 62},
		{X: 18, Y: 62},
		{X: 19, Y: 64},
	}
	got := PtrVerToATC(ptrx, verx)
	if d := cmp.Diff(want, got); len(d) > 0 {
		t.Errorf("differs: %s", d)
	}
}
