package tek

import (
	"math"
	"testing"

	"github.com/google/go-cmp/cmp"
)

var (
	atcdata = []byte{
		0x25, 0x04, 0x01, 0x53, 0xb2, 0xab, 0xa3, 0x25, 0x41, 0x09, 0x11, 0x47,
		0xb2, 0x36, 0x13, 0x01, 0x63, 0x2e, 0x30, 0x4a, 0x66, 0x73, 0x39, 0x91,
		0x22, 0x6b, 0x2f, 0x03, 0x67, 0x32, 0x23, 0x70, 0xbd, 0x23, 0x32, 0xac,
		0x62, 0x96, 0xeb, 0x2a, 0x02, 0x57, 0x46, 0x55, 0x2a, 0x63, 0xb1, 0x9f,
		0xe4, 0x2f, 0x91, 0x07, 0x35, 0x04, 0x2e, 0xf0, 0x02, 0x48, 0xec, 0x8a,
		0x5b, 0x02, 0x23, 0x15, 0x23, 0xe0, 0xb1, 0xf8, 0xec, 0xd1, 0x2a, 0x50,
		0xd5, 0xc4, 0x8c, 0x31, 0xc0, 0x19, 0x3c, 0x32, 0x3c, 0x37, 0xac, 0x74,
		0xe8, 0x5d, 0x59, 0xb5, 0xf4, 0xdf, 0x08, 0x48, 0x58, 0xb0, 0x16, 0x51,
		0x5c, 0xa3, 0xa5, 0x21, 0x9c, 0x97, 0x3d, 0x47, 0xe7, 0xa8, 0x60, 0x87,
		0x5c, 0xae, 0x7e, 0x72, 0xa6, 0x9e, 0x9e, 0xc1, 0xce, 0xa7, 0x3c, 0xaa,
		0x2d, 0x72, 0xb0, 0xb6, 0x38, 0x7a, 0x6e, 0xbe, 0x0c, 0x7f, 0xb8, 0x28,
		0x9c, 0xcc, 0xad, 0x44, 0x8c, 0xd8, 0xce, 0x90, 0x5e, 0xfa, 0xc8, 0xc0,
		0xc0, 0x48, 0xa4, 0xcf, 0xce, 0x60, 0x97, 0x86, 0x5c, 0x87, 0x0d, 0x06,
		0x98, 0x08, 0x9c, 0xd8, 0xa4, 0x65, 0x09, 0x00, 0xfe, 0x9c, 0xe0, 0x44,
		0x5c, 0x88, 0x10, 0xcc, 0xb7, 0x80, 0x8c, 0xbf, 0xfc, 0x01, 0xec, 0xc9,
		0xec, 0x8a, 0xea, 0xcc, 0x7c, 0x21, 0x89, 0xf4, 0x0c, 0x51, 0x0c, 0xac,
		0xcd, 0x28, 0x6c, 0xb0, 0x05, 0x2e, 0x82, 0x48, 0xab, 0x6b, 0x62, 0xa7,
		0xa6, 0xf0, 0x42, 0x98, 0xc5, 0xce, 0x07, 0x59, 0x3b, 0x01, 0x7f, 0xc3,
		0x09, 0xb9, 0x8b, 0x81, 0x9b, 0x2a, 0x41, 0x9c, 0xf8, 0x88, 0x47, 0x67,
		0x07, 0xbc, 0x47, 0x9e, 0xc2, 0x08, 0x95, 0xe0, 0x63, 0x49, 0x60, 0xad,
		0x3b, 0x8c, 0xc3, 0x8c, 0xc3, 0xcb, 0xf3, 0x83, 0xc3, 0x1d, 0x45, 0x3d,
		0x81, 0xcb, 0x9b, 0xb0, 0xd7, 0xd0, 0xe1, 0xfa, 0x6b, 0x54, 0x11, 0x35,
		0xb0, 0xe6, 0x33, 0x3b, 0x55, 0x17, 0x53, 0x4d, 0x45, 0x70, 0x25, 0x73,
		0x33, 0x67, 0xfb, 0x40, 0xf3, 0x31, 0xd7, 0x33, 0x90, 0x9e, 0xeb, 0x3f,
		0x77, 0x1b, 0x23, 0xa0, 0x0f, 0x62, 0x33, 0x23, 0x36, 0x34, 0x31, 0x93,
		0x1a, 0x6d, 0x69, 0xb0, 0x59, 0x01, 0xe3, 0xf0, 0xf7, 0xba, 0x12, 0x77,
		0x53, 0x5b, 0x63, 0x8a, 0x0b, 0x75, 0xe8, 0x50, 0x91, 0xda, 0xe9, 0x31,
		0xfc, 0xb2, 0x7d, 0x01, 0x8c, 0xfd, 0x3c, 0x9c, 0x1a, 0xee, 0x30, 0x63,
		0x22, 0x0b, 0xd0, 0x67, 0x3e, 0x93, 0x26, 0x7a, 0x3c, 0xef, 0x94, 0x9f,
		0xdc, 0x31, 0x98, 0x1e, 0xe9, 0x71, 0xb6, 0xa9, 0x4e, 0x3f, 0x3c, 0x3a,
		0x91, 0xb5, 0x35, 0xf2, 0xbe, 0xa5, 0xf6, 0x50, 0x9c, 0x87, 0x18, 0xee,
		0x7d, 0xdf, 0x50, 0x06, 0x36, 0x1b, 0x1c, 0x67, 0x54, 0x54, 0x4c, 0xe1,
		0x75, 0x7f, 0xde, 0x95, 0x8d, 0xc8, 0xde, 0x75, 0x7f, 0xc8, 0x38, 0x4c,
		0x4f, 0xc4, 0xec, 0xd9, 0xa6, 0x5d, 0x6c, 0xc4, 0x6c, 0xd4, 0x94, 0x8a,
		0xc9, 0xa0, 0xff, 0xe5, 0x9f, 0xa5, 0x48, 0x8d, 0xdc, 0x46, 0xc8, 0x9c,
		0x6e, 0x07, 0xec, 0xe4, 0xd4, 0xfe, 0x7d, 0xd3, 0x6d, 0x00, 0x60, 0x6f,
		0xd8, 0xfa, 0x0d, 0xec, 0x50, 0x30, 0x5e, 0xa0, 0x2b, 0x2c, 0xcc, 0x5f,
		0x9c, 0x0c, 0xec, 0xfc, 0x8c, 0x30, 0xfe, 0xd0, 0xc1, 0xf5, 0x30, 0x56,
		0x63, 0xc6, 0xe1, 0x1d, 0xfb, 0xe7, 0x52, 0xd0, 0xc7, 0x96, 0x60, 0x7e,
		0xef, 0x6d, 0xe1, 0x12, 0x83, 0xfb, 0xa3, 0xf0, 0xeb, 0xb2, 0x63, 0x86,
		0xab, 0x7d, 0x83, 0x19, 0x17, 0xf2, 0x42, 0x00, 0xb3, 0x6c, 0x62, 0x6c,
		0x9b, 0xce, 0x88, 0xc8, 0x00, 0x00, 0x03, 0x44, 0x44, 0x66, 0x46, 0xac,
		0x7b, 0xe2, 0x22, 0xed, 0xa7, 0x8d, 0x05, 0xd6, 0x83, 0x00, 0x91, 0x1b,
		0x36, 0xc1, 0xb3, 0x9a, 0x85, 0x87, 0x47, 0xbb, 0x53, 0x26, 0x13, 0x22,
		0xf3, 0xbf, 0xf3, 0x79, 0xc7, 0x2e, 0xb7, 0x62, 0xfb, 0x9d, 0x17, 0x16,
		0x39, 0x2b, 0xf1, 0x14, 0xa2, 0x3f, 0xb3, 0x56, 0x33, 0x9d, 0x1f, 0x71,
		0x71, 0x33, 0xca, 0xab, 0xfb, 0x7f, 0xb1, 0x15, 0xfc, 0x33, 0x1b, 0x92,
		0x22, 0x71, 0x13, 0x3d, 0x13, 0x5f, 0x41, 0x7e, 0x18, 0x03, 0x60, 0x92,
		0x25, 0xe5, 0x72, 0xdf, 0x61, 0x2b, 0x3c, 0x30, 0x4c, 0x31, 0xb8, 0xf3,
		0xe3, 0x4d, 0xb2, 0x23, 0x34, 0x5b, 0x5c, 0x60, 0x1c, 0x11, 0x3d, 0x3f,
		0xfd, 0x01, 0xbc, 0x1b, 0xfc, 0x40, 0xd4, 0x73, 0x2a, 0xbe, 0x24, 0xd7,
		0xd4, 0x1d, 0x8c, 0xb7, 0xac, 0xd0, 0x6c, 0x0a,

		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,

		0xfb, 0xc5, 0xdc, 0x89, 0x22, 0x77, 0xf3, 0x02, 0x21, 0x58, 0x22, 0x94,
		0xef, 0x42, 0xe1, 0xc3, 0x52, 0x53, 0xd3, 0x98, 0xc2, 0xb1, 0xc7, 0x59,
		0xa7, 0x40, 0xc7, 0x77, 0x23, 0x61, 0x8a, 0x9a, 0x61, 0xd7, 0x82, 0x46,
		0x3b,
	}
	atcunpacked = []uint16{
		//TODO
	}
	verpack = []byte{
		0x25, 0x04, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0x3b,
	}
	fig37 = []byte{0x25, 0x00, 0x05, 0x00, 0x0f, 0x01, 0x00, 0xeb, 0x3b}

	ptr38 = []byte{
		0xfb, 0xc5, 0xdc, 0x89, 0x22, 0x77, 0xf3, 0x02, 0x21, 0x58, 0x22, 0x94,
		0xef, 0x42, 0xe1, 0xc3, 0x52, 0x53, 0xd3, 0x98, 0xc2, 0xb1, 0xc7, 0x59,
		0xa7, 0x40, 0xc7, 0x77, 0x23, 0x61, 0x8a, 0x9a, 0x61, 0xd7, 0x82, 0x46,
		0x3b, //0x0a,
	}

	empty = []byte("%\x00\x01\xff;")
)

// TODO add split func and test on either session's "READ PTR,VER"

func TestTekUnpack(t *testing.T) {
	for _, td := range []struct {
		name string
		in   []byte
		want []uint16
	}{
		{
			name: "atc",
			in:   atcdata,
			want: atcunpacked,
		},
		{
			name: "empty",
			in:   empty,
			want: nil,
		},
		{
			name: "ver",
			in:   verpack,
			want: nil,
		},
	} {
		t.Run(td.name, func(t *testing.T) {
			got, err := Unpack(td.in)
			if err != nil {
				t.Fatal(err)
			}
			if d := cmp.Diff(td.want, got); len(d) > 0 {
				t.Fatalf("--want ++got\n%s", d)
			}
		})
	}
}

func Test_checksum(t *testing.T) {
	t.Run("verpack", func(t *testing.T) {
		err := checksum(verpack[1:len(verpack)-2], 0xfb)
		if err != nil {
			t.Error(err)
		}
	})
	t.Run("vector fig 3-7", func(t *testing.T) {
		// skip first byte (%) and last (;)
		err := checksum(fig37[1:len(fig37)-3], fig37[len(fig37)-2])
		if err != nil {
			t.Error(err)
		}
	})
}

// ptr and ver data
var (

	// example from manual pg 132-135
	ptrx = []uint16{1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 31, 33, 35, 37, 39}
	verx = []uint16{
		62, 59, 63, 59, 63, 59, 63, 59, 63, 59, 63, 59, 63, 59, 63, 60, 63, 60, 63, 60,
		63, 60, 63, 60, 63, 60, 63, 60, 108, 106, 64, 59, 64, 60, 64, 60, 64, 60, 64, 60,
	}
	wantx = Points{
		{X: 1, Y: 60.5},
		{X: 2, Y: 61},
		{X: 3, Y: 61},
		{X: 4, Y: 61},
		{X: 5, Y: 61},
		{X: 6, Y: 61},
		{X: 7, Y: 61},
		{X: 8, Y: 61.5},
		{X: 9, Y: 61.5},
		{X: 10, Y: 61.5},
		{X: 11, Y: 61.5},
		{X: 12, Y: 61.5},
		{X: 13, Y: 61.5},
		{X: 14, Y: 61.5},
		{X: 15, Y: 83.5},
		{X: 16, Y: 62},
		{X: 17, Y: 62},
		{X: 18, Y: 62},
		{X: 19, Y: 62},
	}

	// from session 5 text
	// READ PTR
	// 19:33:38.460176 512 points, min     1 max  65535
	s5ptr = []uint16{
		
	}
	// READ VER
	// 19:33:38.706763 782 points, min   310 max   317
	s5ver = []uint16{
		314, 313, 314, 313, 314, 313, 314, 313, 314, 313, 315, 313, 314, 313, 315, 313, 314, 313, 315, 313, 315, 313, 315, 313, 315, 313, 315, 313, 315, 313, 315, 313, 315, 313, 314, 312, 315, 313, 315, 312, 314, 313, 315, 312, 314, 313, 315, 312, 315, 312, 315, 313, 314, 312, 314, 313, 315, 313, 314, 313, 316, 312, 316, 312, 317, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 317, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 311, 316, 311, 316, 312, 316, 311, 316, 311, 316, 312, 316, 312, 316, 311, 315, 311, 316, 311, 315, 311, 316, 311, 315, 311, 316, 311, 316, 311, 315, 311, 315, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 315, 311, 315, 311, 316, 311, 315, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 315, 311, 315, 311, 315, 311, 316, 311, 316, 311, 315, 311, 316, 311, 315, 311, 316, 311, 316, 311, 315, 311, 316, 311, 315, 311, 316, 311, 316, 311, 316, 311, 316, 311, 315, 311, 316, 311, 316, 311, 315, 311, 316, 311, 316, 311, 316, 311, 316, 312, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 315, 311, 316, 311, 316, 311, 315, 311, 316, 311, 316, 312, 316, 311, 316, 311, 316, 311, 316, 312, 316, 312, 316, 312, 316, 312, 316, 311, 317, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 311, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 317, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 312, 316, 311, 317, 312, 316, 312, 316, 312, 316, 312, 316, 312, 317, 312, 316, 312, 316, 312, 316, 312, 317, 312, 317, 312, 316, 312, 317, 312, 316, 312, 317, 312, 317, 312, 317, 312, 316, 312, 316, 312, 316, 312, 316, 312, 317, 312, 317, 312, 317, 312, 317, 312, 316, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 316, 312, 317, 312, 317, 312, 317, 312, 317, 312, 316, 312, 317, 312, 317, 312, 316, 312, 317, 312, 317, 312, 316, 312, 317, 312, 317, 312, 317, 312, 316, 312, 317, 312, 317, 312, 316, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 316, 312, 317, 312, 316, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 317, 312, 316, 311, 317, 312, 317, 312, 317, 312, 317, 312, 317, 311, 317, 312, 317, 312, 317, 312, 317, 312, 316, 312, 316, 311, 317, 312, 317, 312, 316, 312, 316, 311, 317, 311, 316, 311, 317, 312, 316, 311, 316, 312, 317, 312, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 317, 311, 316, 311, 317, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 310, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 310, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 316, 311, 315, 311, 315, 311, 315, 311, 316, 310, 315, 310, 315, 311, 315, 310, 315, 310,
	}
	s5want = Points{
		{X: 64, Y: 313.5}, {X: 97, Y: 313.5}, {X: 102, Y: 313.5}, {X: 104, Y: 313.5},
		{X: 106, Y: 313.5}, {X: 107, Y: 314}, {X: 110, Y: 313.5}, {X: 114, Y: 314},
		{X: 115, Y: 313.5}, {X: 116, Y: 314}, {X: 119, Y: 314}, {X: 124, Y: 314},
		{X: 125, Y: 314}, {X: 126, Y: 314}, {X: 128, Y: 314}, {X: 130, Y: 314},
		{X: 133, Y: 314}, {X: 136, Y: 313}, {X: 137, Y: 314}, {X: 138, Y: 313.5},
		{X: 140, Y: 313.5}, {X: 141, Y: 313.5}, {X: 142, Y: 313.5}, {X: 143, Y: 313.5},
		{X: 145, Y: 313.5}, {X: 147, Y: 314}, {X: 148, Y: 313}, {X: 149, Y: 313.5},
		{X: 150, Y: 314}, {X: 151, Y: 313.5}, {X: 152, Y: 314}, {X: 153, Y: 314},
		{X: 154, Y: 314.5}, {X: 155, Y: 314}, {X: 156, Y: 314}, {X: 157, Y: 314},
		{X: 158, Y: 314}, {X: 159, Y: 314}, {X: 160, Y: 314}, {X: 161, Y: 314},
		{X: 162, Y: 314}, {X: 163, Y: 314}, {X: 164, Y: 314}, {X: 165, Y: 314},
		{X: 166, Y: 314.5}, {X: 167, Y: 314}, {X: 168, Y: 314}, {X: 169, Y: 314},
		{X: 170, Y: 314}, {X: 171, Y: 314}, {X: 172, Y: 314}, {X: 173, Y: 314},
		{X: 174, Y: 314}, {X: 175, Y: 314}, {X: 176, Y: 314}, {X: 177, Y: 314},
		{X: 178, Y: 314}, {X: 179, Y: 314}, {X: 180, Y: 314}, {X: 181, Y: 314},
		{X: 182, Y: 314}, {X: 183, Y: 314}, {X: 184, Y: 314}, {X: 185, Y: 314},
		{X: 186, Y: 314}, {X: 187, Y: 314}, {X: 188, Y: 314}, {X: 189, Y: 314},
		{X: 190, Y: 314}, {X: 191, Y: 314}, {X: 192, Y: 314}, {X: 193, Y: 314},
		{X: 194, Y: 314}, {X: 195, Y: 314}, {X: 196, Y: 314}, {X: 197, Y: 314},
		{X: 198, Y: 314}, {X: 199, Y: 314}, {X: 200, Y: 314}, {X: 201, Y: 314},
		{X: 202, Y: 314}, {X: 203, Y: 314}, {X: 204, Y: 313.5}, {X: 205, Y: 313.5},
		{X: 206, Y: 314}, {X: 207, Y: 313.5}, {X: 208, Y: 313.5}, {X: 209, Y: 314},
		{X: 210, Y: 314}, {X: 211, Y: 313.5}, {X: 212, Y: 313}, {X: 213, Y: 313.5},
		{X: 214, Y: 313}, {X: 215, Y: 313.5}, {X: 216, Y: 313}, {X: 217, Y: 313.5},
		{X: 218, Y: 313.5}, {X: 219, Y: 313}, {X: 220, Y: 313}, {X: 221, Y: 313.5},
		{X: 222, Y: 313.5}, {X: 223, Y: 313.5}, {X: 224, Y: 313.5}, {X: 225, Y: 313.5},
		{X: 226, Y: 313}, {X: 227, Y: 313}, {X: 228, Y: 313.5}, {X: 229, Y: 313},
		{X: 230, Y: 313.5}, {X: 231, Y: 313.5}, {X: 232, Y: 313.5}, {X: 233, Y: 313.5},
		{X: 234, Y: 313.5}, {X: 235, Y: 313.5}, {X: 236, Y: 313}, {X: 237, Y: 313},
		{X: 238, Y: 313}, {X: 239, Y: 313.5}, {X: 240, Y: 313.5}, {X: 241, Y: 313},
		{X: 242, Y: 313.5}, {X: 243, Y: 313}, {X: 244, Y: 313.5}, {X: 245, Y: 313.5},
		{X: 246, Y: 313}, {X: 247, Y: 313.5}, {X: 248, Y: 313}, {X: 249, Y: 313.5},
		{X: 250, Y: 313.5}, {X: 251, Y: 313.5}, {X: 252, Y: 313.5}, {X: 253, Y: 313},
		{X: 254, Y: 313.5}, {X: 255, Y: 313.5}, {X: 256, Y: 313}, {X: 257, Y: 313.5},
		{X: 258, Y: 313.5}, {X: 259, Y: 313.5}, {X: 260, Y: 314}, {X: 261, Y: 313.5},
		{X: 262, Y: 313.5}, {X: 263, Y: 313.5}, {X: 264, Y: 313.5}, {X: 265, Y: 313.5},
		{X: 266, Y: 313.5}, {X: 267, Y: 313}, {X: 268, Y: 313.5}, {X: 269, Y: 313.5},
		{X: 270, Y: 313}, {X: 271, Y: 313.5}, {X: 272, Y: 314}, {X: 273, Y: 313.5},
		{X: 274, Y: 313.5}, {X: 275, Y: 313.5}, {X: 276, Y: 314}, {X: 277, Y: 314},
		{X: 278, Y: 314}, {X: 279, Y: 314}, {X: 280, Y: 313.5}, {X: 281, Y: 314.5},
		{X: 282, Y: 314}, {X: 283, Y: 314}, {X: 284, Y: 314}, {X: 285, Y: 314},
		{X: 286, Y: 313.5}, {X: 287, Y: 314}, {X: 288, Y: 314}, {X: 289, Y: 314},
		{X: 290, Y: 314}, {X: 291, Y: 314}, {X: 292, Y: 314}, {X: 293, Y: 314.5},
		{X: 294, Y: 314}, {X: 295, Y: 314}, {X: 296, Y: 314}, {X: 297, Y: 314},
		{X: 298, Y: 314}, {X: 299, Y: 314}, {X: 300, Y: 314}, {X: 301, Y: 314},
		{X: 302, Y: 314}, {X: 303, Y: 314}, {X: 304, Y: 313.5}, {X: 305, Y: 314.5},
		{X: 306, Y: 314}, {X: 307, Y: 314}, {X: 308, Y: 314}, {X: 309, Y: 314},
		{X: 310, Y: 314.5}, {X: 311, Y: 314}, {X: 312, Y: 314}, {X: 313, Y: 314},
		{X: 314, Y: 314.5}, {X: 315, Y: 314.5}, {X: 316, Y: 314}, {X: 317, Y: 314.5},
		{X: 318, Y: 314}, {X: 319, Y: 314.5}, {X: 320, Y: 314.5}, {X: 321, Y: 314.5},
		{X: 322, Y: 314}, {X: 323, Y: 314}, {X: 324, Y: 314}, {X: 325, Y: 314},
		{X: 326, Y: 314.5}, {X: 327, Y: 314.5}, {X: 328, Y: 314.5}, {X: 329, Y: 314.5},
		{X: 330, Y: 314}, {X: 331, Y: 314.5}, {X: 332, Y: 314.5}, {X: 333, Y: 314.5},
		{X: 334, Y: 314.5}, {X: 335, Y: 314.5}, {X: 336, Y: 314.5}, {X: 337, Y: 314.5},
		{X: 338, Y: 314.5}, {X: 339, Y: 314.5}, {X: 340, Y: 314.5}, {X: 341, Y: 314},
		{X: 342, Y: 314.5}, {X: 343, Y: 314.5}, {X: 344, Y: 314.5}, {X: 345, Y: 314.5},
		{X: 346, Y: 314}, {X: 347, Y: 314.5}, {X: 348, Y: 314.5}, {X: 349, Y: 314},
		{X: 350, Y: 314.5}, {X: 351, Y: 314.5}, {X: 352, Y: 314}, {X: 353, Y: 314.5},
		{X: 354, Y: 314.5}, {X: 355, Y: 314.5}, {X: 356, Y: 314}, {X: 357, Y: 314.5},
		{X: 358, Y: 314.5}, {X: 359, Y: 314}, {X: 360, Y: 314.5}, {X: 361, Y: 314.5},
		{X: 362, Y: 314.5}, {X: 363, Y: 314.5}, {X: 364, Y: 314.5}, {X: 365, Y: 314.5},
		{X: 366, Y: 314.5}, {X: 367, Y: 314.5}, {X: 368, Y: 314.5}, {X: 369, Y: 314.5},
		{X: 370, Y: 314.5}, {X: 371, Y: 314.5}, {X: 372, Y: 314.5}, {X: 373, Y: 314.5},
		{X: 374, Y: 314.5}, {X: 375, Y: 314.5}, {X: 376, Y: 314.5}, {X: 377, Y: 314.5},
		{X: 378, Y: 314.5}, {X: 379, Y: 314.5}, {X: 380, Y: 314.5}, {X: 381, Y: 314.5},
		{X: 382, Y: 314.5}, {X: 383, Y: 314.5}, {X: 384, Y: 314.5}, {X: 385, Y: 314.5},
		{X: 386, Y: 314.5}, {X: 387, Y: 314.5}, {X: 388, Y: 314.5}, {X: 389, Y: 314.5},
		{X: 390, Y: 314.5}, {X: 391, Y: 314.5}, {X: 392, Y: 314.5}, {X: 393, Y: 314.5},
		{X: 394, Y: 314.5}, {X: 395, Y: 314.5}, {X: 396, Y: 314.5}, {X: 397, Y: 314.5},
		{X: 398, Y: 314.5}, {X: 399, Y: 314.5}, {X: 400, Y: 314.5}, {X: 401, Y: 314.5},
		{X: 402, Y: 314.5}, {X: 403, Y: 314.5}, {X: 404, Y: 314.5}, {X: 405, Y: 314.5},
		{X: 406, Y: 314.5}, {X: 407, Y: 314.5}, {X: 408, Y: 314.5}, {X: 409, Y: 314.5},
		{X: 410, Y: 314.5}, {X: 411, Y: 314.5}, {X: 412, Y: 314.5}, {X: 413, Y: 314.5},
		{X: 414, Y: 314.5}, {X: 415, Y: 314.5}, {X: 416, Y: 314}, {X: 417, Y: 314.5},
		{X: 418, Y: 314}, {X: 419, Y: 314.5}, {X: 420, Y: 314.5}, {X: 421, Y: 314.5},
		{X: 422, Y: 314.5}, {X: 423, Y: 314.5}, {X: 424, Y: 314.5}, {X: 425, Y: 314.5},
		{X: 426, Y: 314.5}, {X: 427, Y: 314.5}, {X: 428, Y: 314.5}, {X: 429, Y: 314.5},
		{X: 430, Y: 314.5}, {X: 431, Y: 314.5}, {X: 432, Y: 314.5}, {X: 433, Y: 314.5},
		{X: 434, Y: 314.5}, {X: 435, Y: 313.5}, {X: 436, Y: 314.5}, {X: 437, Y: 314.5},
		{X: 438, Y: 314.5}, {X: 439, Y: 314.5}, {X: 440, Y: 314}, {X: 441, Y: 314.5},
		{X: 442, Y: 314.5}, {X: 443, Y: 314.5}, {X: 444, Y: 314.5}, {X: 445, Y: 314},
		{X: 446, Y: 313.5}, {X: 447, Y: 314.5}, {X: 448, Y: 314.5}, {X: 449, Y: 314},
		{X: 450, Y: 313.5}, {X: 451, Y: 314}, {X: 452, Y: 313.5}, {X: 453, Y: 314.5},
		{X: 454, Y: 313.5}, {X: 455, Y: 314}, {X: 456, Y: 314.5}, {X: 457, Y: 313.5},
		{X: 458, Y: 313.5}, {X: 459, Y: 313.5}, {X: 460, Y: 313.5}, {X: 461, Y: 313.5},
		{X: 462, Y: 313.5}, {X: 463, Y: 314}, {X: 464, Y: 313.5}, {X: 465, Y: 314},
		{X: 466, Y: 313.5}, {X: 467, Y: 313.5}, {X: 468, Y: 313.5}, {X: 469, Y: 313.5},
		{X: 470, Y: 313.5}, {X: 471, Y: 313.5}, {X: 472, Y: 313.5}, {X: 473, Y: 313.5},
		{X: 474, Y: 313.5}, {X: 475, Y: 313.5}, {X: 476, Y: 313.5}, {X: 477, Y: 313.5},
		{X: 478, Y: 313.5}, {X: 479, Y: 313.5}, {X: 480, Y: 313.5}, {X: 481, Y: 313.5},
		{X: 482, Y: 313.5}, {X: 483, Y: 313.5}, {X: 484, Y: 313.5}, {X: 485, Y: 313.5},
		{X: 486, Y: 313.5}, {X: 487, Y: 313.5}, {X: 488, Y: 313.5}, {X: 489, Y: 313.5},
		{X: 490, Y: 313.5}, {X: 491, Y: 313.5}, {X: 492, Y: 313}, {X: 493, Y: 313.5},
		{X: 494, Y: 313.5}, {X: 495, Y: 313.5}, {X: 496, Y: 313.5}, {X: 497, Y: 313.5},
		{X: 498, Y: 313}, {X: 499, Y: 313.5}, {X: 500, Y: 313.5}, {X: 501, Y: 313.5},
		{X: 502, Y: 313.5}, {X: 503, Y: 313.5}, {X: 504, Y: 313.5}, {X: 505, Y: 313},
		{X: 506, Y: 313}, {X: 507, Y: 313}, {X: 508, Y: 313}, {X: 509, Y: 312.5},
		{X: 510, Y: 313}, {X: 511, Y: 312.5}, {X: 512, Y: 312.5},
	}
)

func TestPtrVerToATC(t *testing.T) {
	t.Run("example pg132", func(t *testing.T) {
		got := PtrVerToATC(ptrx, verx)
		if d := cmp.Diff(wantx, got); len(d) > 0 {
			t.Errorf("differs: %s", d)
		}
	})
	t.Run("pg132 but with defects flagged", func(t *testing.T) {
		// make a copy. pointer data does not change, so no need for a copy of that
		var verd = make([]uint16, len(verx))
		var wantd = make(Points, len(wantx))
		copy(verd, verx)
		copy(wantd, wantx)
		// modify
		verd[28] = math.MaxUint16 - verd[28]
		verd[29] = math.MaxUint16 - verd[29]
		wantd[14].Y = 61.5

		got := PtrVerToATC(ptrx, verd)
		if d := cmp.Diff(wantd, got); len(d) > 0 {
			t.Errorf("differs: %s", d)
		}
	})
	t.Run("session 5", func(t *testing.T) {
		got := PtrVerToATC(s5ptr, s5ver)
		if d := cmp.Diff(s5want, got); len(d) > 0 {
			t.Errorf("differs: %s\n%#v", d, got)
		}
	})
}
