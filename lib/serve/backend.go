package main

import (
	"encoding/json"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/gotmc/prologix/lib/tek"
)

var data = []int{
	10, 20, 15, 30, 25, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
} // Example data

var realData = tek.Points{
	{X: 64, Y: 313.5}, {X: 97, Y: 313.5}, {X: 102, Y: 313.5}, {X: 104, Y: 313.5},
	{X: 106, Y: 313.5}, {X: 107, Y: 314}, {X: 110, Y: 313.5}, {X: 114, Y: 314},
	{X: 115, Y: 313.5}, {X: 116, Y: 314}, {X: 119, Y: 314}, {X: 124, Y: 314},
	{X: 125, Y: 314}, {X: 126, Y: 314}, {X: 128, Y: 314}, {X: 130, Y: 314},
	{X: 133, Y: 314}, {X: 136, Y: 313}, {X: 137, Y: 314}, {X: 138, Y: 313.5},
	{X: 140, Y: 313.5}, {X: 141, Y: 313.5}, {X: 142, Y: 313.5}, {X: 143, Y: 313.5},
	{X: 145, Y: 313.5}, {X: 147, Y: 314}, {X: 148, Y: 313}, {X: 149, Y: 313.5},
	{X: 150, Y: 314}, {X: 151, Y: 313.5}, {X: 152, Y: 314}, {X: 153, Y: 314},
	{X: 154, Y: 314.5}, {X: 155, Y: 314}, {X: 156, Y: 314}, {X: 157, Y: 314},
	{X: 158, Y: 314}, {X: 159, Y: 314}, {X: 160, Y: 314}, {X: 161, Y: 314},
	{X: 162, Y: 314}, {X: 163, Y: 314}, {X: 164, Y: 314}, {X: 165, Y: 314},
	{X: 166, Y: 314.5}, {X: 167, Y: 314}, {X: 168, Y: 314}, {X: 169, Y: 314},
	{X: 170, Y: 314}, {X: 171, Y: 314}, {X: 172, Y: 314}, {X: 173, Y: 314},
	{X: 174, Y: 314}, {X: 175, Y: 314}, {X: 176, Y: 314}, {X: 177, Y: 314},
	{X: 178, Y: 314}, {X: 179, Y: 314}, {X: 180, Y: 314}, {X: 181, Y: 314},
	{X: 182, Y: 314}, {X: 183, Y: 314}, {X: 184, Y: 314}, {X: 185, Y: 314},
	{X: 186, Y: 314}, {X: 187, Y: 314}, {X: 188, Y: 314}, {X: 189, Y: 314},
	{X: 190, Y: 314}, {X: 191, Y: 314}, {X: 192, Y: 314}, {X: 193, Y: 314},
	{X: 194, Y: 314}, {X: 195, Y: 314}, {X: 196, Y: 314}, {X: 197, Y: 314},
	{X: 198, Y: 314}, {X: 199, Y: 314}, {X: 200, Y: 314}, {X: 201, Y: 314},
	{X: 202, Y: 314}, {X: 203, Y: 314}, {X: 204, Y: 313.5}, {X: 205, Y: 313.5},
	{X: 206, Y: 314}, {X: 207, Y: 313.5}, {X: 208, Y: 313.5}, {X: 209, Y: 314},
	{X: 210, Y: 314}, {X: 211, Y: 313.5}, {X: 212, Y: 313}, {X: 213, Y: 313.5},
	{X: 214, Y: 313}, {X: 215, Y: 313.5}, {X: 216, Y: 313}, {X: 217, Y: 313.5},
	{X: 218, Y: 313.5}, {X: 219, Y: 313}, {X: 220, Y: 313}, {X: 221, Y: 313.5},
	{X: 222, Y: 313.5}, {X: 223, Y: 313.5}, {X: 224, Y: 313.5}, {X: 225, Y: 313.5},
	{X: 226, Y: 313}, {X: 227, Y: 313}, {X: 228, Y: 313.5}, {X: 229, Y: 313},
	{X: 230, Y: 313.5}, {X: 231, Y: 313.5}, {X: 232, Y: 313.5}, {X: 233, Y: 313.5},
	{X: 234, Y: 313.5}, {X: 235, Y: 313.5}, {X: 236, Y: 313}, {X: 237, Y: 313},
	{X: 238, Y: 313}, {X: 239, Y: 313.5}, {X: 240, Y: 313.5}, {X: 241, Y: 313},
	{X: 242, Y: 313.5}, {X: 243, Y: 313}, {X: 244, Y: 313.5}, {X: 245, Y: 313.5},
	{X: 246, Y: 313}, {X: 247, Y: 313.5}, {X: 248, Y: 313}, {X: 249, Y: 313.5},
	{X: 250, Y: 313.5}, {X: 251, Y: 313.5}, {X: 252, Y: 313.5}, {X: 253, Y: 313},
	{X: 254, Y: 313.5}, {X: 255, Y: 313.5}, {X: 256, Y: 313}, {X: 257, Y: 313.5},
	{X: 258, Y: 313.5}, {X: 259, Y: 313.5}, {X: 260, Y: 314}, {X: 261, Y: 313.5},
	{X: 262, Y: 313.5}, {X: 263, Y: 313.5}, {X: 264, Y: 313.5}, {X: 265, Y: 313.5},
	{X: 266, Y: 313.5}, {X: 267, Y: 313}, {X: 268, Y: 313.5}, {X: 269, Y: 313.5},
	{X: 270, Y: 313}, {X: 271, Y: 313.5}, {X: 272, Y: 314}, {X: 273, Y: 313.5},
	{X: 274, Y: 313.5}, {X: 275, Y: 313.5}, {X: 276, Y: 314}, {X: 277, Y: 314},
	{X: 278, Y: 314}, {X: 279, Y: 314}, {X: 280, Y: 313.5}, {X: 281, Y: 314.5},
	{X: 282, Y: 314}, {X: 283, Y: 314}, {X: 284, Y: 314}, {X: 285, Y: 314},
	{X: 286, Y: 313.5}, {X: 287, Y: 314}, {X: 288, Y: 314}, {X: 289, Y: 314},
	{X: 290, Y: 314}, {X: 291, Y: 314}, {X: 292, Y: 314}, {X: 293, Y: 314.5},
	{X: 294, Y: 314}, {X: 295, Y: 314}, {X: 296, Y: 314}, {X: 297, Y: 314},
	{X: 298, Y: 314}, {X: 299, Y: 314}, {X: 300, Y: 314}, {X: 301, Y: 314},
	{X: 302, Y: 314}, {X: 303, Y: 314}, {X: 304, Y: 313.5}, {X: 305, Y: 314.5},
	{X: 306, Y: 314}, {X: 307, Y: 314}, {X: 308, Y: 314}, {X: 309, Y: 314},
	{X: 310, Y: 314.5}, {X: 311, Y: 314}, {X: 312, Y: 314}, {X: 313, Y: 314},
	{X: 314, Y: 314.5}, {X: 315, Y: 314.5}, {X: 316, Y: 314}, {X: 317, Y: 314.5},
	{X: 318, Y: 314}, {X: 319, Y: 314.5}, {X: 320, Y: 314.5}, {X: 321, Y: 314.5},
	{X: 322, Y: 314}, {X: 323, Y: 314}, {X: 324, Y: 314}, {X: 325, Y: 314},
	{X: 326, Y: 314.5}, {X: 327, Y: 314.5}, {X: 328, Y: 314.5}, {X: 329, Y: 314.5},
	{X: 330, Y: 314}, {X: 331, Y: 314.5}, {X: 332, Y: 314.5}, {X: 333, Y: 314.5},
	{X: 334, Y: 314.5}, {X: 335, Y: 314.5}, {X: 336, Y: 314.5}, {X: 337, Y: 314.5},
	{X: 338, Y: 314.5}, {X: 339, Y: 314.5}, {X: 340, Y: 314.5}, {X: 341, Y: 314},
	{X: 342, Y: 314.5}, {X: 343, Y: 314.5}, {X: 344, Y: 314.5}, {X: 345, Y: 314.5},
	{X: 346, Y: 314}, {X: 347, Y: 314.5}, {X: 348, Y: 314.5}, {X: 349, Y: 314},
	{X: 350, Y: 314.5}, {X: 351, Y: 314.5}, {X: 352, Y: 314}, {X: 353, Y: 314.5},
	{X: 354, Y: 314.5}, {X: 355, Y: 314.5}, {X: 356, Y: 314}, {X: 357, Y: 314.5},
	{X: 358, Y: 314.5}, {X: 359, Y: 314}, {X: 360, Y: 314.5}, {X: 361, Y: 314.5},
	{X: 362, Y: 314.5}, {X: 363, Y: 314.5}, {X: 364, Y: 314.5}, {X: 365, Y: 314.5},
	{X: 366, Y: 314.5}, {X: 367, Y: 314.5}, {X: 368, Y: 314.5}, {X: 369, Y: 314.5},
	{X: 370, Y: 314.5}, {X: 371, Y: 314.5}, {X: 372, Y: 314.5}, {X: 373, Y: 314.5},
	{X: 374, Y: 314.5}, {X: 375, Y: 314.5}, {X: 376, Y: 314.5}, {X: 377, Y: 314.5},
	{X: 378, Y: 314.5}, {X: 379, Y: 314.5}, {X: 380, Y: 314.5}, {X: 381, Y: 314.5},
	{X: 382, Y: 314.5}, {X: 383, Y: 314.5}, {X: 384, Y: 314.5}, {X: 385, Y: 314.5},
	{X: 386, Y: 314.5}, {X: 387, Y: 314.5}, {X: 388, Y: 314.5}, {X: 389, Y: 314.5},
	{X: 390, Y: 314.5}, {X: 391, Y: 314.5}, {X: 392, Y: 314.5}, {X: 393, Y: 314.5},
	{X: 394, Y: 314.5}, {X: 395, Y: 314.5}, {X: 396, Y: 314.5}, {X: 397, Y: 314.5},
	{X: 398, Y: 314.5}, {X: 399, Y: 314.5}, {X: 400, Y: 314.5}, {X: 401, Y: 314.5},
	{X: 402, Y: 314.5}, {X: 403, Y: 314.5}, {X: 404, Y: 314.5}, {X: 405, Y: 314.5},
	{X: 406, Y: 314.5}, {X: 407, Y: 314.5}, {X: 408, Y: 314.5}, {X: 409, Y: 314.5},
	{X: 410, Y: 314.5}, {X: 411, Y: 314.5}, {X: 412, Y: 314.5}, {X: 413, Y: 314.5},
	{X: 414, Y: 314.5}, {X: 415, Y: 314.5}, {X: 416, Y: 314}, {X: 417, Y: 314.5},
	{X: 418, Y: 314}, {X: 419, Y: 314.5}, {X: 420, Y: 314.5}, {X: 421, Y: 314.5},
	{X: 422, Y: 314.5}, {X: 423, Y: 314.5}, {X: 424, Y: 314.5}, {X: 425, Y: 314.5},
	{X: 426, Y: 314.5}, {X: 427, Y: 314.5}, {X: 428, Y: 314.5}, {X: 429, Y: 314.5},
	{X: 430, Y: 314.5}, {X: 431, Y: 314.5}, {X: 432, Y: 314.5}, {X: 433, Y: 314.5},
	{X: 434, Y: 314.5}, {X: 435, Y: 313.5}, {X: 436, Y: 314.5}, {X: 437, Y: 314.5},
	{X: 438, Y: 314.5}, {X: 439, Y: 314.5}, {X: 440, Y: 314}, {X: 441, Y: 314.5},
	{X: 442, Y: 314.5}, {X: 443, Y: 314.5}, {X: 444, Y: 314.5}, {X: 445, Y: 314},
	{X: 446, Y: 313.5}, {X: 447, Y: 314.5}, {X: 448, Y: 314.5}, {X: 449, Y: 314},
	{X: 450, Y: 313.5}, {X: 451, Y: 314}, {X: 452, Y: 313.5}, {X: 453, Y: 314.5},
	{X: 454, Y: 313.5}, {X: 455, Y: 314}, {X: 456, Y: 314.5}, {X: 457, Y: 313.5},
	{X: 458, Y: 313.5}, {X: 459, Y: 313.5}, {X: 460, Y: 313.5}, {X: 461, Y: 313.5},
	{X: 462, Y: 313.5}, {X: 463, Y: 314}, {X: 464, Y: 313.5}, {X: 465, Y: 314},
	{X: 466, Y: 313.5}, {X: 467, Y: 313.5}, {X: 468, Y: 313.5}, {X: 469, Y: 313.5},
	{X: 470, Y: 313.5}, {X: 471, Y: 313.5}, {X: 472, Y: 313.5}, {X: 473, Y: 313.5},
	{X: 474, Y: 313.5}, {X: 475, Y: 313.5}, {X: 476, Y: 313.5}, {X: 477, Y: 313.5},
	{X: 478, Y: 313.5}, {X: 479, Y: 313.5}, {X: 480, Y: 313.5}, {X: 481, Y: 313.5},
	{X: 482, Y: 313.5}, {X: 483, Y: 313.5}, {X: 484, Y: 313.5}, {X: 485, Y: 313.5},
	{X: 486, Y: 313.5}, {X: 487, Y: 313.5}, {X: 488, Y: 313.5}, {X: 489, Y: 313.5},
	{X: 490, Y: 313.5}, {X: 491, Y: 313.5}, {X: 492, Y: 313}, {X: 493, Y: 313.5},
	{X: 494, Y: 313.5}, {X: 495, Y: 313.5}, {X: 496, Y: 313.5}, {X: 497, Y: 313.5},
	{X: 498, Y: 313}, {X: 499, Y: 313.5}, {X: 500, Y: 313.5}, {X: 501, Y: 313.5},
	{X: 502, Y: 313.5}, {X: 503, Y: 313.5}, {X: 504, Y: 313.5}, {X: 505, Y: 313},
	{X: 506, Y: 313}, {X: 507, Y: 313}, {X: 508, Y: 313}, {X: 509, Y: 312.5},
	{X: 510, Y: 313}, {X: 511, Y: 312.5}, {X: 512, Y: 312.5},
}

type digitizerData struct {
	Coordinates [][2]int `json:"coordinates"`
	HLegend     string   `json:"hLegend"`
	HMult       float32  `json:"hMult"` // multiplier: 1,2,5,10,...
	VLegend     string   `json:"vLegend"`
	VMult       float32  `json:"vMult"`
}

var n = 0

func updateData() digitizerData {
	n++
	// Simulate data update
	dd := digitizerData{
		HLegend: "ns",
		HMult:   2,
		VLegend: "mV",
		VMult:   10,
	}
	if n%2 == 0 {
		dd.Coordinates = make([][2]int, len(data))
		for i, v := range data {
			add := time.Now().UnixNano() % 256
			dd.Coordinates[i] = [2]int{i * 2, v + int(add) + i%8}
		}
		return dd
	}
	// otherwise, use real (saved) data
	dd.Coordinates = make([][2]int, 0, len(realData))
	for _, p := range realData {
		dd.Coordinates = append(dd.Coordinates, [2]int{int(p.X), int(p.Y)})
	}
	return dd
}

func dataHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(updateData())
}

func main() {
	var disableCache bool
	if strings.HasPrefix(os.Args[0], os.Getenv("TMPDIR")) {
		// executable will be in /tmp if run from `go run .`
		// in this case, enable dev mode (i.e. disable cache)
		disableCache = true
	}
	http.HandleFunc("/data", dataHandler)
	http.Handle("/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		if disableCache {
			w.Header().Set("Cache-Control", "no-store")
			w.Header().Set("Pragma", "no-cache")
			w.Header().Set("Expires", "0")
		}
		http.FileServer(http.Dir("./")).ServeHTTP(w, r)
	}))
	addr := ":7912"
	log.Printf("listening on %s...", addr)
	http.ListenAndServe(addr, nil)
}
